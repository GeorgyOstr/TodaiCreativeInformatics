/**********************************************************************

  eval.c -

  $Author$
  created at: Thu Jun 10 14:22:17 JST 1993

  Copyright (C) 1993-2007 Yukihiro Matsumoto
  Copyright (C) 2000  Network Applied Communication Laboratory, Inc.
  Copyright (C) 2000  Information-technology Promotion Agency, Japan

**********************************************************************/

#include "eval_intern.h"
#include "iseq.h"
#include "gc.h"
#include "ruby/vm.h"
#include "ruby/encoding.h"
#include "internal.h"
#include "vm_core.h"
#include "probes_helper.h"

NORETURN(void rb_raise_jump(VALUE, VALUE));

VALUE rb_eLocalJumpError;
VALUE rb_eSysStackError;

#define exception_error GET_VM()->special_exceptions[ruby_error_reenter]

#include "eval_error.c"
#include "eval_jump.c"

#define CLASS_OR_MODULE_P(obj) \
    (!SPECIAL_CONST_P(obj) && \
     (BUILTIN_TYPE(obj) == T_CLASS || BUILTIN_TYPE(obj) == T_MODULE))

/* Initializes the Ruby VM and builtin libraries.
 * @retval 0 if succeeded.
 * @retval non-zero an error occurred.
 */
int
ruby_setup(void)
{
    static int initialized = 0;
    int state;

    if (initialized)
        return 0;
    initialized = 1;

    ruby_init_stack((void *)&state);
    Init_BareVM();
    Init_heap();
    Init_vm_objects();

    PUSH_TAG();
    if ((state = EXEC_TAG()) == 0) {
        rb_call_inits();
        ruby_prog_init();
        GET_VM()->running = 1;
    }
    POP_TAG();

    return state;
}

/* Calls ruby_setup() and check error.
 *
 * Prints errors and calls exit(3) if an error occurred.
 */
void
ruby_init(void)
{
    int state = ruby_setup();
    if (state) {
        error_print();
        exit(EXIT_FAILURE);
    }
}

/*! Processes command line arguments and compiles the Ruby source to execute.
 *
 * This function does:
 * \li Processes the given command line flags and arguments for ruby(1)
 * \li compiles the source code from the given argument, -e or stdin, and
 * \li returns the compiled source as an opaque pointer to an internal data structure
 *
 * @return an opaque pointer to the compiled source or an internal special value.
 * @sa ruby_executable_node().
 */
void *
ruby_options(int argc, char **argv)
{
    int state;
    void *volatile iseq = 0;

    ruby_init_stack((void *)&iseq);
    PUSH_TAG();
    if ((state = EXEC_TAG()) == 0) {
        SAVE_ROOT_JMPBUF(GET_THREAD(), iseq = ruby_process_options(argc, argv));
    }
    else {
        rb_clear_trace_func();
        state = error_handle(state);
        iseq = (void *)INT2FIX(state);
    }
    POP_TAG();
    return iseq;
}

static void
ruby_finalize_0(void)
{
    PUSH_TAG();
    if (EXEC_TAG() == 0) {
        rb_trap_exit();
    }
    POP_TAG();
    rb_exec_end_proc();
    rb_clear_trace_func();
}

static void
ruby_finalize_1(void)
{
    ruby_sig_finalize();
    GET_THREAD()->errinfo = Qnil;
    rb_gc_call_finalizer_at_exit();
}

/** Runs the VM finalization processes.
 *
 * <code>END{}</code> and procs registered by <code>Kernel.#at_exit</code> are
 * executed here. See the Ruby language spec for more details.
 *
 * @note This function is allowed to raise an exception if an error occurred.
 */
void
ruby_finalize(void)
{
    ruby_finalize_0();
    ruby_finalize_1();
}

/** Destructs the VM.
 *
 * Runs the VM finalization processes as well as ruby_finalize(), and frees
 * resources used by the VM.
 *
 * @param ex Default value to the return value.
 * @return If an error occurred returns a non-zero. If otherwise, returns the
 *         given ex.
 * @note This function does not raise any exception.
 */
int
ruby_cleanup(volatile int ex)
{
    int state;
    volatile VALUE errs[2];
    rb_thread_t *th = GET_THREAD();
    int nerr;

    rb_threadptr_interrupt(th);
    rb_threadptr_check_signal(th);
    PUSH_TAG();
    if ((state = EXEC_TAG()) == 0) {
        SAVE_ROOT_JMPBUF(th, { RUBY_VM_CHECK_INTS(th); });
    }
    POP_TAG();

    errs[1] = th->errinfo;
    th->safe_level = 0;
    ruby_init_stack(&errs[STACK_UPPER(errs, 0, 1)]);

    PUSH_TAG();
    if ((state = EXEC_TAG()) == 0) {
        SAVE_ROOT_JMPBUF(th, ruby_finalize_0());
    }
    POP_TAG();

    /* protect from Thread#raise */
    th->status = THREAD_KILLED;

    errs[0] = th->errinfo;
    PUSH_TAG();
    if ((state = EXEC_TAG()) == 0) {
        SAVE_ROOT_JMPBUF(th, rb_thread_terminate_all());
    }
    else if (ex == 0) {
        ex = state;
    }
    th->errinfo = errs[1];
    ex = error_handle(ex);

#if EXIT_SUCCESS != 0 || EXIT_FAILURE != 1
    switch (ex) {
#if EXIT_SUCCESS != 0
      case 0: ex = EXIT_SUCCESS; break;
#endif
#if 1
#if EXIT_FAILURE != 1
      case 1: ex = EXIT_FAILURE; break;
#endif
#endif
    }
#endif

    state = 0;
    for (nerr = 0; nerr < numberof(errs); ++nerr) {
        VALUE err = errs[nerr];

        if (!RTEST(err)) continue;

        /* th->errinfo contains a NODE while break'ing */
        if (RB_TYPE_P(err, T_NODE)) continue;

        if (rb_obj_is_kind_of(err, rb_eSystemExit)) {
            ex = sysexit_status(err);
            break;
        }
        else if (rb_obj_is_kind_of(err, rb_eSignal)) {
            VALUE sig = rb_iv_get(err, "signo");
            state = NUM2INT(sig);
            break;
        }
        else if (ex == EXIT_SUCCESS) {
            ex = EXIT_FAILURE;
        }
    }

    ruby_finalize_1();

    /* unlock again if finalizer took mutexes. */
    rb_threadptr_unlock_all_locking_mutexes(GET_THREAD());
    POP_TAG();
    rb_thread_stop_timer_thread(1);
    ruby_vm_destruct(GET_VM());
    if (state) ruby_default_signal(state);

    return ex;
}

static int
ruby_exec_internal(void *n)
{
    volatile int state;
    VALUE iseq = (VALUE)n;
    rb_thread_t *th = GET_THREAD();

    if (!n) return 0;

    PUSH_TAG();
    if ((state = EXEC_TAG()) == 0) {
        SAVE_ROOT_JMPBUF(th, {
            th->base_block = 0;
            rb_iseq_eval_main(iseq);
        });
    }
    POP_TAG();
    return state;
}

/*! Calls ruby_cleanup() and exits the process */
void
ruby_stop(int ex)
{
    exit(ruby_cleanup(ex));
}

/*! Checks the return value of ruby_options().
 * @param n return value of ruby_options().
 * @param status pointer to the exit status of this process.
 *
 * ruby_options() sometimes returns a special value to indicate this process
 * should immediately exit. This function checks if the case. Also stores the
 * exit status that the caller have to pass to exit(3) into
 * <code>*status</code>.
 *
 * @retval non-zero if the given opaque pointer is actually a compiled source.
 * @retval 0 if the given value is such a special value.
 */
int
ruby_executable_node(void *n, int *status)
{
    VALUE v = (VALUE)n;
    int s;

    switch (v) {
      case Qtrue:  s = EXIT_SUCCESS; break;
      case Qfalse: s = EXIT_FAILURE; break;
      default:
        if (!FIXNUM_P(v)) return TRUE;
        s = FIX2INT(v);
    }
    if (status) *status = s;
    return FALSE;
}

/*! Runs the given compiled source and exits this process.
 * @retval 0 if successfully run the source
 * @retval non-zero if an error occurred.
*/
int
ruby_run_node(void *n)
{
    int status;
    if (!ruby_executable_node(n, &status)) {
        ruby_cleanup(0);
        return status;
    }
    return ruby_cleanup(ruby_exec_node(n));
}

/*! Runs the given compiled source */
int
ruby_exec_node(void *n)
{
    ruby_init_stack((void *)&n);
    return ruby_exec_internal(n);
}

/*
 *  call-seq:
 *     Module.nesting    -> array
 *
 *  Returns the list of +Modules+ nested at the point of call.
 *
 *     module M1
 *       module M2
 *         $a = Module.nesting
 *       end
 *     end
 *     $a           #=> [M1::M2, M1]
 *     $a[0].name   #=> "M1::M2"
 */

static VALUE
rb_mod_nesting(void)
{
    VALUE ary = rb_ary_new();
    const NODE *cref = rb_vm_cref();

    while (cref && cref->nd_next) {
        VALUE klass = cref->nd_clss;
        if (!(cref->flags & NODE_FL_CREF_PUSHED_BY_EVAL) &&
            !NIL_P(klass)) {
            rb_ary_push(ary, klass);
        }
        cref = cref->nd_next;
    }
    return ary;
}

/*
 *  call-seq:
 *     Module.constants   -> array
 *     Module.constants(inherited)   -> array
 *
 *  In the first form, returns an array of the names of all
 *  constants accessible from the point of call.
 *  This list includes the names of all modules and classes
 *  defined in the global scope.
 *
 *     Module.constants.first(4)
 *        # => [:ARGF, :ARGV, :ArgumentError, :Array]
 *
 *     Module.constants.include?(:SEEK_SET)   # => false
 *
 *     class IO
 *       Module.constants.include?(:SEEK_SET) # => true
 *     end
 *
 *  The second form calls the instance method +constants+.
 */

static VALUE
rb_mod_s_constants(int argc, VALUE *argv, VALUE mod)
{
    const NODE *cref = rb_vm_cref();
    VALUE klass;
    VALUE cbase = 0;
    void *data = 0;

    if (argc > 0 || mod != rb_cModule) {
        return rb_mod_constants(argc, argv, mod);
    }

    while (cref) {
        klass = cref->nd_clss;
        if (!(cref->flags & NODE_FL_CREF_PUSHED_BY_EVAL) &&
            !NIL_P(klass)) {
            data = rb_mod_const_at(cref->nd_clss, data);
            if (!cbase) {
                cbase = klass;
            }
        }
        cref = cref->nd_next;
    }

    if (cbase) {
        data = rb_mod_const_of(cbase, data);
    }
    return rb_const_list(data);
}

void
rb_frozen_class_p(VALUE klass)
{
    if (SPECIAL_CONST_P(klass)) {
      noclass:
        Check_Type(klass, T_CLASS);
    }
    if (OBJ_FROZEN(klass)) {
        const char *desc;

        if (FL_TEST(klass, FL_SINGLETON))
            desc = "object";
        else {
            switch (BUILTIN_TYPE(klass)) {
              case T_MODULE:
              case T_ICLASS:
                desc = "module";
                break;
              case T_CLASS:
                desc = "class";
                break;
              default:
                goto noclass;
            }
        }
        rb_error_frozen(desc);
    }
}

NORETURN(static void rb_longjmp(int, volatile VALUE, VALUE));
static VALUE get_errinfo(void);
static VALUE get_thread_errinfo(rb_thread_t *th);

static VALUE
exc_setup_cause(VALUE exc, VALUE cause)
{
    ID id_cause;
    CONST_ID(id_cause, "cause");

#if SUPPORT_JOKE
    if (NIL_P(cause)) {
        ID id_true_cause;
        CONST_ID(id_true_cause, "true_cause");

        cause = rb_attr_get(rb_eFatal, id_true_cause);
        if (NIL_P(cause)) {
            cause = rb_exc_new_cstr(rb_eFatal, "because using such Ruby");
            rb_ivar_set(cause, id_cause, INT2FIX(42)); /* the answer */
            OBJ_FREEZE(cause);
            rb_ivar_set(rb_eFatal, id_true_cause, cause);
        }
    }
#endif
    if (!NIL_P(cause) && cause != exc) {
        rb_ivar_set(exc, id_cause, cause);
    }
    return exc;
}

static inline int
sysstack_error_p(VALUE exc)
{
    return exc == sysstack_error || (!SPECIAL_CONST_P(exc) && RBASIC_CLASS(exc) == rb_eSysStackError);
}

static void
setup_exception(rb_thread_t *th, int tag, volatile VALUE mesg, VALUE cause)
{
    VALUE e;
    const char *file = 0;
    volatile int line = 0;
    int nocause = 0;

    if (NIL_P(mesg)) {
        mesg = th->errinfo;
        if (INTERNAL_EXCEPTION_P(mesg)) JUMP_TAG(TAG_FATAL);
        nocause = 1;
    }
    if (NIL_P(mesg)) {
        mesg = rb_exc_new(rb_eRuntimeError, 0, 0);
        nocause = 0;
    }
    if (cause == Qundef) {
        cause = nocause ? Qnil : get_thread_errinfo(th);
    }
    exc_setup_cause(mesg, cause);

    file = rb_sourcefile();
    if (file) line = rb_sourceline();
    if (file && !NIL_P(mesg)) {
        VALUE at;
        if (sysstack_error_p(mesg)) {
            if (NIL_P(rb_attr_get(mesg, idBt))) {
                at = rb_vm_backtrace_object();
                if (mesg == sysstack_error) {
                    VALUE ruby_vm_sysstack_error_copy(void);
                    mesg = ruby_vm_sysstack_error_copy();
                }
                rb_ivar_set(mesg, idBt, at);
                rb_ivar_set(mesg, idBt_locations, at);
            }
        }
        else if (NIL_P(get_backtrace(mesg))) {
            at = rb_vm_backtrace_object();
            if (OBJ_FROZEN(mesg)) {
                mesg = rb_obj_dup(mesg);
            }
            rb_ivar_set(mesg, idBt_locations, at);
            set_backtrace(mesg, at);
        }
    }

    if (!NIL_P(mesg)) {
        th->errinfo = mesg;
    }

    if (RTEST(ruby_debug) && !NIL_P(e = th->errinfo) &&
        !rb_obj_is_kind_of(e, rb_eSystemExit)) {
        int status;

        mesg = e;
        PUSH_TAG();
        if ((status = EXEC_TAG()) == 0) {
            th->errinfo = Qnil;
            e = rb_obj_as_string(mesg);
            th->errinfo = mesg;
            if (file && line) {
                warn_printf("Exception `%"PRIsVALUE"' at %s:%d - %"PRIsVALUE"\n",
                            rb_obj_class(mesg), file, line, e);
            }
            else if (file) {
                warn_printf("Exception `%"PRIsVALUE"' at %s - %"PRIsVALUE"\n",
                            rb_obj_class(mesg), file, e);
            }
            else {
                warn_printf("Exception `%"PRIsVALUE"' - %"PRIsVALUE"\n",
                            rb_obj_class(mesg), e);
            }
        }
        POP_TAG();
        if (status == TAG_FATAL && th->errinfo == exception_error) {
            th->errinfo = mesg;
        }
        else if (status) {
            rb_threadptr_reset_raised(th);
            JUMP_TAG(status);
        }
    }

    if (rb_threadptr_set_raised(th)) {
        th->errinfo = exception_error;
        rb_threadptr_reset_raised(th);
        JUMP_TAG(TAG_FATAL);
    }

    if (tag != TAG_FATAL) {
        if (RUBY_DTRACE_RAISE_ENABLED()) {
            RUBY_DTRACE_RAISE(rb_obj_classname(th->errinfo),
                              rb_sourcefile(),
                              rb_sourceline());
        }
        EXEC_EVENT_HOOK(th, RUBY_EVENT_RAISE, th->cfp->self, 0, 0, mesg);
    }
}

static VALUE
top_include(int argc, VALUE *argv, VALUE self)
{
    rb_thread_t *th = GET_THREAD();

    if (th->top_wrapper) {
        rb_warning("main.include in the wrapped load is effective only in wrapper module");
        return rb_mod_include(argc, argv, th->top_wrapper);
    }
    return rb_mod_include(argc, argv, rb_cObject);
}
